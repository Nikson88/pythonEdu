i = 10

while i >= 1: # Если изменить знак условие только на > то i уменьшиться только до 2, в данном случае i уменьшится до 1
    print(i, end=', ') # 10, 9, 8, 7, 6, 5, 4, 3 ,2, 1
    # i = i - 1, i++ и i--  не поддерживается в python!
    i -= 1 # 10 будет уменьшаться на каждой иттерации цикла на единицу, некое подобие икремента
###
###
print()
print("hello", "world", sep='!') # Указываем сепаратор - разделитель между двумя строками в данном случае указан восклицательный знак
print("hello", "world", sep='\n') # Указываем сепаратор - разделитель в данном случае это перенос строки
print(i, end=' ') # Указываем окончание строки, по умолчанию всегда стоит \n, но таким образом в конце мы указываем пробел и строка не переносится, а печатаются через пробел в одну строку
print()
###
###
line = "Hello world"
for l in line: # Для l в line - Создается переменная l внутри цикла for для итерации строки line, вообще цикл for очень хорошо подходит для итерируемых типов данных
    if l == ' ':
        continue # Оператор continue прерывает выполнение кода который находится ниже и цикл начинается с новой итерации,
                    # в данном случае мы с помощью него убираем лишний пробел
    print(f'{l}*', end="_|")
print()
###
###
for l in line:
    if l == ' ': # Hello - когда l ,сталкнется с пробело цикл завершиться
        break # Оператор break полностью завершает цикл и выходит из него
    print(f"|_{l}", end = " ")
else: # Иначе - есть так же и в цикле for, он выполняется по завершении цикла,(в нем можно выводить какие либо оповещения)
        # но только если он не был прерван оператором break так как цикл в данном случае считается не завершенным
    print('\nЦикл завершен!') # перед текстом указан перенос строки так как предидущая операция это функция вывод текста на экран с окончание пробела


